{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\robac\\\\To_Do_Project\\\\client\\\\src\\\\components\\\\ListTodos.js\";\nimport React, { Fragment, useEffect, useState } from 'react';\nimport EditTodo from './EditTodo';\n\nrequire('dotenv').config({\n  path: '../../../.env'\n});\n\nconst ListTodos = () => {\n  const [todos, setTodos] = useState([]); //delet todo\n\n  const deleteTodo = async id => {\n    try {\n      const deleteTodo = await fetch(`http://${process.env.host}:${process.env.port2}/todos/${id}`, {\n        method: \"DELETE\"\n      });\n      setTodos(todos.filter(todo => todo.todo_id !== id));\n      console.log('deleted todo', deleteTodo);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  const getTodos = async () => {\n    try {\n      const response = await fetch(`http://${process.env.host}:${process.env.port2}/todos`);\n      const jsonData = await response.json();\n      setTodos(jsonData); // console.log(jsonData);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  useEffect(() => {\n    getTodos();\n  }, []); // console.log(todos);\n  //add bracket to only reload once, \n  //(bc useEffect reloads a bunch of times)\n\n  console.log('todos', todos);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 3\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table mt-5 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"Description\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, \"Edit\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, \"Delete\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, todos.map(todo => /*#__PURE__*/React.createElement(\"tr\", {\n    key: todo.todo_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, todo.description), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(EditTodo, {\n    todo: todo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-danger\",\n    onClick: () => deleteTodo(todo.todo_id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, \"Delete\")))))));\n};\n\nexport default ListTodos;","map":{"version":3,"sources":["C:/Users/robac/To_Do_Project/client/src/components/ListTodos.js"],"names":["React","Fragment","useEffect","useState","EditTodo","require","config","path","ListTodos","todos","setTodos","deleteTodo","id","fetch","process","env","host","port2","method","filter","todo","todo_id","console","log","err","error","message","getTodos","response","jsonData","json","map","description"],"mappings":"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","sourcesContent":["import React, {Fragment, useEffect, useState} from 'react';\r\nimport EditTodo from './EditTodo';\r\nrequire('dotenv').config({ path: '../../../.env' });\r\n\r\nconst ListTodos = () => {\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  //delet todo\r\n  const deleteTodo = async (id) => {\r\n    try {\r\n      const deleteTodo = await fetch(`http://${process.env.host}:${process.env.port2}/todos/${id}`, {\r\n        method: \"DELETE\"\r\n      })\r\n      setTodos(todos.filter(todo => todo.todo_id !== id));\r\n      console.log('deleted todo', deleteTodo);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  }\r\n\r\n  const getTodos = async () => {\r\n    try {\r\n      const response = await fetch(`http://${process.env.host}:${process.env.port2}/todos`)\r\n      const jsonData = await response.json();\r\n      setTodos(jsonData);\r\n      // console.log(jsonData);\r\n\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    getTodos();\r\n  }, []);\r\n\r\n  // console.log(todos);\r\n  //add bracket to only reload once, \r\n  //(bc useEffect reloads a bunch of times)\r\n\r\n  console.log('todos', todos);\r\n  return (\r\n  <Fragment>\r\n    {\" \"}\r\n    <table className=\"table mt-5 text-center\">\r\n    <thead>\r\n      <tr>\r\n        <th>Description</th>\r\n        <th>Edit</th>\r\n        <th>Delete</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {/* <tr>\r\n        <td>John</td>\r\n        <td>Doe</td>\r\n        <td>john@example.com</td>\r\n      </tr>*/}\r\n      {todos.map(todo => (\r\n        <tr key={todo.todo_id}>\r\n          <td>{todo.description}</td>\r\n          <td><EditTodo todo={todo}/></td>\r\n          <td>\r\n            <button className='btn btn-danger' onClick={()=> deleteTodo(todo.todo_id)}>Delete</button>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  </table>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default ListTodos;\r\n\r\n\r\n "]},"metadata":{},"sourceType":"module"}